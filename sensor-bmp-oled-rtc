esphome:
  name: sensorpantalla

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "yourkey"

ota:
  password: "yourpass"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Sensorpantalla Fallback Hotspot"
    password: "yourhotspotkey"

  # Optional manual IP
  manual_ip:
    static_ip: yourip
    gateway: yourgateway
    subnet:  yoursubnet

captive_portal:

# Example configuration entry for ESP32
i2c:
  sda: 21
  scl: 22
  scan: true
  id: bus_a

time:
  - platform: ds1307
    i2c_id: bus_a
    id: ds1307_time
    update_interval: never
  - platform: homeassistant
    # instead try to synchronize via network repeatedly ...
    on_time_sync:
      then:
        # ... and update the RTC when the synchronization was successful
        ds1307.write_time:
  - platform: homeassistant
    id: esptime
      # instead try to synchronize via network repeatedly ...

web_server:
    port: 80
    version: 2
    local: true

light:
  - platform: status_led
    name: "Led Azul ESP BMP"
    pin:
      number: GPIO2
      inverted: False

switch:      
  - platform: restart
    name: BMP_Restart

sensor:
  - platform: bmp280
    i2c_id: bus_a
    temperature:
      id: "temp"
      name: "BME280 Temperatura"
      oversampling: 4x   
    pressure:
      id: "press"
      name: "BME280 Presión"
      oversampling: 4x
#    humidity:
#      name: "BME280 Humidity"
    address: 0x76
    update_interval: 60s

# Example configuration entry
  - platform: internal_temperature
    name: "Temperatura Interna"
    
  - platform: homeassistant
    id: todays_forecast_high
    entity_id: $todays_forecast_high_entity
    internal: False

  - platform: homeassistant
    id: todays_forecast_low
    entity_id: $todays_forecast_low_entity
    internal: False

  - platform: homeassistant
    id: presion_at
    entity_id: $presion_atmosferica
    internal: False

  - platform: homeassistant
    id: temperatura_real
    entity_id: $outside_temp_sensor
    internal: False
# Example configuration entry with 2 sensors and filter
# Example configuration entry
#  - platform: internal_temperature  ------  solo en esp32
#    name: "Temperatura Interna"

  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    name: "WiFi BMP Signal dB"
    id: wifi_signal_db
    update_interval: 60s
    entity_category: "diagnostic"

  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    name: "WiFi BMP Señal db"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    entity_category: "diagnostic"

#####

substitutions: #substitute your own values in this section
  outside_temp_sensor: sensor.esp_bmp_bme280_temperatura #sensor.casa_realfeel_temperature #entity from Home Assistant 
#  outside_temp_sensor: sensor.casa_realfeel_temperature #entity from Home Assistant
#  weather_entity: weather.smhi_home #entity from Home Assistant
  weather_entity: weather.forecast_casa #weather.casa
  todays_forecast_high_entity: sensor.temperatura # sensor.casa_realfeel_temperature #entity from Home Assistant
  todays_forecast_low_entity: sensor.openweathermap_feels_like_temperature
  presion_atmosferica: sensor.esp_bmp_bme280_presion #sensor.bme280_presion
#---------------------------------------------------------------------------------------------

binary_sensor:
  - platform: status
    name: "Display Status"
        
text_sensor:
  - platform: homeassistant
    id: weather_state
    name: "Current Weather Icon"
    entity_id: $weather_entity
    internal: False

font:
#  - file: 'arial.ttf'
#    id: font5
#    size: 14
  # gfonts://family[@weight]
  - file: "gfonts://Roboto"
    id: roboto
    size: 14
  - file: "gfonts://Roboto"
    id: roboto2
    size: 24
  - file: 'SourceSansPro-Light.ttf'
    id: font1
    size: 16
  - file: 'SourceSansPro-Light.ttf'
    id: font2
    size: 26
  - file: 'materialdesignicons-webfont.ttf'
    id: font3
    size: 18
    glyphs:
      - "\U000F13D5" #mdi:home-minus-outline
  - file: 'materialdesignicons-webfont.ttf'
    id: font4
    size: 40
    glyphs:
      - "\U000F0594" #"clear-night"
      - "\U000F0590" #"cloudy"
      - "\U000F0591" #"fog"
      - "\U000F0592" #"hail"
      - "\U000F0593" #"lightning"
      - "\U000F067E" #"lightning-rainy"
      - "\U000F0595" #"partlycloudy"
      - "\U000F0596" #"pouring"
      - "\U000F0597" #"rainy"
      - "\U000F0598" #"snowy"
      - "\U000F067F" #"snowy-rainy"
      - "\U000F0599" #"sunny"
      - "\U000F059D" #"windy"
      - "\U000F059E" #"windy-variant"

graph:
  # Show bare-minimum auto-ranged graph
  - id: single_temperature_graph
    #sensor: temperatura_real
    sensor: temp
    duration: 48h
    min_value: 0
    max_value: 40
    x_grid: 12h
    y_grid: 10.0  
    width: 126
    height: 40
  - id: single_presion_at
    #sensor:  presion_at
    sensor: press
    duration: 48h
    min_value: 600
    max_value: 1200
    x_grid: 12h
    y_grid: 300
    width: 126
    height: 40
  # Show multi-trace graph
  - id: multi_temperature_graph
  #  sensor: temperatura
    duration: 48h
    min_value: 0
    max_value: 40
    x_grid: 12h
    y_grid: 10.0     # degC/div
    width: 126
    height: 40
    traces:
      - sensor: todays_forecast_low
        line_type: DOTTED
        line_thickness: 2
#      #  color: my_red
      - sensor: temp
        line_type: SOLID
        line_thickness: 3
#        #color: my_blue
#      - sensor: temperatura
#        line_type: DOTTED
#        line_thickness: 2
      #  color: my_green
   
display:
  - platform: ssd1306_i2c
    i2c_id: bus_a
#    reset_pin: D0
#    address: 0x3C
#  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    address: 0x3C
    id: oled_display
    pages:
      - id: page1
        lambda: |-
            // Display temperature and pressión atm bmp280
            it.strftime(64 , 6, id(roboto), TextAlign::CENTER, "%H : %M", id(ds1307_time).now());
            it.printf(64 , 26, id(roboto), TextAlign::CENTER, "Temperatura: %.1f °C", id(temp).state);
            it.printf(64 , 50, id(roboto), TextAlign::CENTER, "P. Atm:  %.1f  hPa", id(press).state);
      - id: page2
        lambda: |-
            // Draw the graph at position [x=10,y=20]
            it.printf(64 , 5, id(roboto), TextAlign::CENTER, "Temp: %.1f °C", id(temp).state);
            it.graph(0, 20, id(single_temperature_graph));
      - id: page3
        lambda: |-
            // Draw the graph at position [x=10,y=20]
            it.printf(64 , 5, id(roboto), TextAlign::CENTER, "P. Atm:  %.1f  hPa", id(press).state);
            it.graph(0, 20, id(single_presion_at));
      - id: page4
        lambda: |-
            // Draw the graph at position [x=10,y=20]
            it.printf(64 , 0, id(roboto), TextAlign::TOP_LEFT, "%.1f °C ", id(temp).state);
            it.printf(64 , 0, id(roboto), TextAlign::TOP_RIGHT, "%.1f °C ", id(todays_forecast_high).state);
            it.graph(0, 20, id(multi_temperature_graph));
      - id: page5
        lambda: |-
            // Display date and time
            it.strftime(64 , 0, id(roboto), TextAlign::TOP_CENTER, "%d / %m / %Y", id(ds1307_time).now());
            it.strftime(64 , 30, id(roboto2), TextAlign::CENTER, "%H : %M", id(ds1307_time).now());
            it.strftime(64 , 62, id(roboto), TextAlign::BOTTOM_CENTER, "%A ", id(ds1307_time).now());
      - id: page6
        lambda: |-
            //informacion de dias
            it.strftime(64 , 0, id(roboto), TextAlign::TOP_CENTER, "%d / %m / %Y", id(ds1307_time).now());
            it.strftime(64 , 30, id(roboto2), TextAlign::CENTER, "%H : %M", id(ds1307_time).now());
            it.strftime(64 , 62, id(roboto), TextAlign::BOTTOM_CENTER, "Semana %W", id(ds1307_time).now());
      - id: page7
        lambda: |-
            //informacion de dias
            it.strftime(64 , 0, id(roboto), TextAlign::TOP_CENTER, "%d / %m / %Y", id(ds1307_time).now());
            it.strftime(64 , 30, id(roboto2), TextAlign::CENTER, "%H : %M", id(ds1307_time).now());
            it.strftime(64 , 62, id(roboto), TextAlign::BOTTOM_CENTER, "Dia %j", id(ds1307_time).now());
      - id: page8
        lambda: |-
            if (id(weather_state).has_state()) {
              std::map<std::string, std::string> weather_icon_map
                {
                  {"clear-night", "\U000F0594"},
                  {"cloudy", "\U000F0590"},
                  {"fog", "\U000F0591"},
                  {"hail", "\U000F0592"},
                  {"lightning", "\U000F0593"},
                  {"lightning-rainy", "\U000F067E"},
                  {"partlycloudy", "\U000F0595"},
                  {"pouring", "\U000F0596"},
                  {"rainy", "\U000F0597"},
                  {"snowy", "\U000F0598"},
                  {"snowy-rainy", "\U000F067F"},
                  {"sunny", "\U000F0599"},
                  {"windy", "\U000F059D"},
                  {"windy-variant", "\U000F059E"},
                };
                it.printf(0, it.get_height(), id(font4), TextAlign::BASELINE_LEFT, weather_icon_map[id(weather_state).state.c_str()].c_str());
                }

                // Print time in HH:MM format
                it.strftime(64, 0, id(font1), TextAlign::TOP_CENTER, "%H:%M - %A", id(ds1307_time).now()); 
      
                //Print day of week
                //it.strftime(40, 0, id(font1), TextAlign::TOP_LEFT, "%a", id(ds1307_time).now());
      
                it.line(0, 20, it.get_width(), 20);
      
                //Print home icon
                //it.printf(70, 0, id(font3), "\U000F13D5");

                // Print Forecast High
                if (id(todays_forecast_high).has_state()) {
                it.printf(92, 20, id(font2), TextAlign::TOP_RIGHT, "%7.1f°", id(temp).state);
                }
      
                // Print Forecast High
                if (id(todays_forecast_high).has_state()) {
                it.printf(it.get_width(), 32, id(font1), TextAlign::TOP_RIGHT, "%7.1f°", id(todays_forecast_high).state);
                }
      
                // Print Forecast Low
                if (id(todays_forecast_low).has_state()) {
                it.printf(it.get_width(), 48, id(font1), TextAlign::TOP_RIGHT, "%7.1f°", id(todays_forecast_low).state);
                }

                // Print presion atmosferica
                if (id(todays_forecast_low).has_state()) {
                it.printf(86, 48, id(font1), TextAlign::TOP_RIGHT, "%7.1f", id(press).state);
            }

interval:
  - interval: 5s
    then:
    - display.page.show_next: oled_display
    - component.update: oled_display
